AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Dockerized app to ECS Fargate with CI/CD (GitHub, CodeBuild, CodePipeline)

Parameters:
  AppName:
    Type: String
    Default: my-app
    Description: Name of the application and resource prefix
  ContainerPort:
    Type: Number
    Default: 5000
    Description: Port number that the container listens on
  YourGitHubUsername:
    Type: String
    Description: GitHub username where the source code is hosted
  YourGitHubReponame:
    Type: String
    Description: GitHub repository name containing the source code
  YourGitHubOAuthToken:
    Type: String
    Default: ghp_uL
    Description: token
  YourECRRepositoryName:
    Type: String
    Description: Name of the ECR repository to store container images
    Default: devops-final-ecr-new

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-public-subnet-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-public-subnet-2"

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP traffic to ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-alb-sg"

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow traffic from ALB to ECS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-ecs-sg"

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AppName}-alb"
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-alb"

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AppName}-tg"
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-tg"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref YourECRRepositoryName
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-ecr-repo"

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AppName}-cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-cluster"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-task-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-task-execution-role"

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AppName}-task"
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${AppName}-container"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${YourECRRepositoryName}:latest"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AppName}"
      RetentionInDays: 7

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: [ALBListener, ECRRepository]
    Properties:
      ServiceName: !Sub "${AppName}-service"
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub "${AppName}-container"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroup

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-artifacts-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 7
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-pipeline-artifacts"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-codebuild-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${YourECRRepositoryName}"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub "${ArtifactStoreBucket.Arn}/*"
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-codebuild-role"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-build"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - echo "Installing dependencies..."
                - apt-get update -y && apt-get install -y docker.io
                - echo "Logging in to Amazon ECR..."
                - aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            pre_build:
              commands:
                - echo "Building Docker image..."
                - docker build -t ${YourECRRepositoryName}:latest .
                - docker tag ${YourECRRepositoryName}:latest ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${YourECRRepositoryName}:latest
            build:
              commands:
                - echo "Pushing Docker image to ECR..."
                - docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${YourECRRepositoryName}:latest
            post_build:
              commands:
                - echo "Build completed on `date`"
                - echo "Generating imagedefinitions.json..."
                - printf '[{"name":"${AppName}-container","imageUri":"%s.dkr.ecr.%s.amazonaws.com/%s:%s"}]' ${AWS::AccountId} ${AWS::Region} ${YourECRRepositoryName} latest > imagedefinitions.json
          artifacts:
            files:
              - imagedefinitions.json
            name: !Sub "${AppName}-$(date +%Y-%m-%d)"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AppName
            Value: !Ref AppName
          - Name: YourECRRepositoryName
            Value: !Ref YourECRRepositoryName
      TimeoutInMinutes: 10
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-codebuild-project"
  
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-pipeline-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Expanded S3 permissions
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "${ArtifactStoreBucket.Arn}/*"
              # S3 bucket versioning permissions
              - Effect: Allow
                Action:
                  - s3:GetBucketVersioning
                  - s3:PutBucketVersioning
                Resource: !Sub "${ArtifactStoreBucket.Arn}"
              # Rest of your existing permissions...
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt TaskExecutionRole.Arn
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${YourECRRepositoryName}"
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-pipeline-role"

  MyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AppName}-pipeline"
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub_Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref YourGitHubUsername
                Repo: !Ref YourGitHubReponame
                Branch: main
                OAuthToken: !Ref YourGitHubOAuthToken
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: Docker_Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: ECS_Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ECSService
                FileName: imagedefinitions.json
              RunOrder: 1

Outputs:
  ALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ALB.DNSName
  ServiceURL:
    Description: URL to access the service
    Value: !Sub "http://${ALB.DNSName}"
  ECRRepositoryURI:
    Description: URI of the ECR repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${YourECRRepositoryName}"
  ClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster
  ServiceName:
    Description: Name of the ECS Service
    Value: !Ref ECSService